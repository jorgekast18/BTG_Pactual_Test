AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template para desplegar aplicación en ECS'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC donde se desplegarán los recursos

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subredes públicas donde se desplegarán los servicios

  ContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units para los contenedores (1024 = 1 vCPU)

  ContainerMemory:
    Type: Number
    Default: 512
    Description: Memoria en MB para los contenedores

  BackendRepositoryName:
    Type: String
    Default: backend-repository-fullstack-app
    Description: Nombre del repositorio ECR para el backend

  FrontendRepositoryName:
    Type: String
    Default: frontend-repository-fullstack-app
    Description: Nombre del repositorio ECR para el frontend
  
  mongoUser:
    Type: String
    Default: mongo
    Description: Nombre de usuario para la base de datos MongoDB

  mongoPass:
    Type: String
    Default: mongo
    Description: Pass de usuario para la base de datos MongoDB

  mongoDbName:
    Type: String
    Default: mongo
    Description: Nombre de la db
    
Resources:
  # Cluster de ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: FullStackAppCluster

  # Log Groups para los contenedores
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/backend-service
      RetentionInDays: 30

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/frontend-service
      RetentionInDays: 30

  # Security Group para ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para el Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group para los contenedores de ECS
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para los contenedores de ECS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: full-stack-app-alb
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # Target Group para el Frontend
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Target Group para el Backend
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-target-group
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /docs
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Listener para el ALB (HTTP)
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # Regla para redirigir tráfico al backend
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Definition para el Backend
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-task
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: backend-container
          # Usar el nombre del repositorio como parámetro
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendRepositoryName}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: MONGO_USER
              Value: !Ref mongoUser
            - Name: MONGO_PASS
              Value: !Ref mongoPass
            - Name: MONGO_DB_NAME
              Value: !Ref mongoDbName

  # Task Definition para el Frontend
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: frontend-task
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: frontend-container
          # Usar el nombre del repositorio como parámetro
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FrontendRepositoryName}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: REACT_APP_API_URL
              Value: !Sub http://${ApplicationLoadBalancer.DNSName}/api

  # ECS Service para el Backend
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListenerRule
    Properties:
      ServiceName: backend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - TargetGroupArn: !Ref BackendTargetGroup
          ContainerName: backend-container
          ContainerPort: 8000

  # ECS Service para el Frontend
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: HttpListener
    Properties:
      ServiceName: frontend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - TargetGroupArn: !Ref FrontendTargetGroup
          ContainerName: frontend-container
          ContainerPort: 80

Outputs:
  LoadBalancerUrl:
    Description: URL del Application Load Balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}

  BackendApiUrl:
    Description: URL para el API del Backend
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/api
